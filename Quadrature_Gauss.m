% ======================================================================= %
% SCRIPT NAME : Quadratute_Gauss
% DESCRIPTION : Integral approximation of function using Numerical Approach
% AUTHOR      : Victor Hugo Dalosto de Oliveira
% EMAIL       : victordalosto@gmail.com
% Copyright @ 2018 Victor Hugo Dalosto de Oliveira. All rights reserved.
% ======================================================================= %


function Quadrature_Gauss
%% INPUT SECTION
syms x
F = sin(x)*x^25; % Input F function to integrated
lowerLimit = -1; 
upperLimit = 2.2;
% Number of Gauss point find accurate result for n-1 function
% Example: n=3 find accurate integral until 5 degree polynomial
nGaussPoints = 64;


%% SCRIPT SECTION
% Uncomment next line if you want to export fun to Command Window
% global fun

if nGaussPoints == 1
   n=1; W(1)=0; P(1)=2;
elseif nGaussPoints == 2
   n=2; W(1)=-1/sqrt(3); W(2)=1/sqrt(3); P(1)=1; P(2)=1;   
elseif nGaussPoints == 3
   n=3; W(1)=-sqrt(3)/sqrt(5); W(2)=0; W(3)=sqrt(3)/sqrt(5); P(1)=5/9; P(2)=8/9; P(3)=5/9;
elseif nGaussPoints == 4
   n=4; W(1)=+sqrt(3/7-2/7*sqrt(6/5)); W(2)=-sqrt(3/7-2/7*sqrt(6/5)); W(3)=sqrt(3/7+2/7*sqrt(6/5)); W(4)=-sqrt(3/7+2/7*sqrt(6/5)); P(1)=(18+sqrt(30))/36; P(2)=(18+sqrt(30))/36; P(3)=(18-sqrt(30))/36; P(4)=(18-sqrt(30))/36;
elseif nGaussPoints == 5
   n=5; W(1)=0; W(2)=1/3*sqrt(5-2*sqrt(10/7)); W(3)=-1/3*sqrt(5-2*sqrt(10/7)); W(4)=1/3*sqrt(5+2*sqrt(10/7)); W(5)=-1/3*sqrt(5+2*sqrt(10/7)); P(1)=128/225; P(2)=(322+13*sqrt(70))/900; P(3)=(322+13*sqrt(70))/900; P(4)=(322-13*sqrt(70))/900; P(5)=(322-13*sqrt(70))/900;
elseif nGaussPoints <=10
   n=10; W(1)=-0.1488743389816312; W(2)=0.1488743389816312 ; W(3)=-0.4333953941292472 ; W(4)=0.4333953941292472 ; W(5)=-0.6794095682990244 ; W(6)=0.6794095682990244 ; W(7)=-0.8650633666889845 ; W(8)=0.8650633666889845 ; W(9)=-0.9739065285171717 ; W(10)=0.9739065285171717 ; P(1)=0.2955242247147529; P(2)=0.2955242247147529; P(3)=0.2692667193099963; P(4)=0.2692667193099963; P(5)=0.2190863625159820; P(6)=0.2190863625159820 ; P(7)=0.1494513491505806; P(8)=0.1494513491505806; P(9)=0.0666713443086881; P(10)=0.0666713443086881;
elseif nGaussPoints <=30
   n=30; W(1)=-0.0514718425553177; W(2)=0.0514718425553177; W(3)=-0.153869913608583; W(4)=0.153869913608583; W(5)=-0.254636926167889; W(6)=0.254636926167889; W(7)=-0.352704725530878; W(8)=0.352704725530878; W(9)=-0.447033769538089; W(10)=0.447033769538089; W(11)=-0.536624148142019; W(12)=0.536624148142019; W(13)=-0.620526182989242; W(14)=0.620526182989242; W(15)=-0.697850494793315; W(16)=0.697850494793315; W(17)=-0.767777432104826; W(18)=0.767777432104826; W(19)=-0.829565762382768; W(20)=0.829565762382768; W(21)=-0.882560535792052; W(22)=0.882560535792052; W(23)=-0.926200047429274; W(24)=0.926200047429274; W(25)=-0.960021864968307; W(26)=0.960021864968307; W(27)=-0.983668123279747; W(28)=0.983668123279747; W(29)=-0.996893484074649; W(30)=0.996893484074649; P(1)=0.102852652893558; P(2)=0.102852652893558; P(3)=0.101762389748405; P(4)=0.101762389748405; P(5)=0.0995934205867953; P(6)=0.0995934205867953; P(7)=0.0963687371746443; P(8)=0.0963687371746443; P(9)=0.0921225222377861; P(10)=0.0921225222377861; P(11)=0.086899787201083; P(12)=0.086899787201083; P(13)=0.0807558952294202; P(14)=0.0807558952294202; P(15)=0.0737559747377052; P(16)=0.0737559747377052; P(17)=0.0659742298821805; P(18)=0.0659742298821805; P(19)=0.0574931562176191; P(20)=0.0574931562176191; P(21)=0.0484026728305941; P(22)=0.0484026728305941; P(23)=0.0387991925696271; P(24)=0.0387991925696271; P(25)=0.0287847078833234; P(26)=0.0287847078833234; P(27)=0.018466468311091; P(28)=0.018466468311091; P(29)=0.0079681924961666; P(30)=0.0079681924961666; 
else
   n=64; W(1)=-0.0243502926634244; W(2)=0.0243502926634244; W(3)=-0.0729931217877990; W(4)=0.0729931217877990; W(5)=-0.1214628192961206; W(6)=0.1214628192961206; W(7)=-0.1696444204239928; W(8)=0.1696444204239928; W(9)=-0.2174236437400071; W(10)=0.2174236437400071; W(11)=-0.2646871622087674; W(12)=0.2646871622087674; W(13)=-0.3113228719902110; W(14)=0.3113228719902110; W(15)=-0.3572201583376681; W(16)=0.3572201583376681; W(17)=-0.4022701579639916; W(18)=0.4022701579639916; W(19)=-0.4463660172534641; W(20)=0.4463660172534641; W(21)=-0.4894031457070530; W(22)=0.4894031457070530; W(23)=-0.5312794640198946; W(24)=0.5312794640198946; W(25)=-0.5718956462026340; W(26)=0.5718956462026340; W(27)=-0.6111553551723933; W(28)=0.6111553551723933; W(29)=-0.6489654712546573; W(30)=0.6489654712546573; W(31)=-0.6852363130542333; W(32)=0.6852363130542333; W(33)=-0.7198818501716109; W(34)=0.7198818501716109; W(35)=-0.7528199072605319; W(36)=0.7528199072605319; W(37)=-0.7839723589433414; W(38)=0.7839723589433414; W(39)=-0.8132653151227975; W(40)=0.8132653151227975; W(41)=-0.8406292962525803; W(42)=0.8406292962525803; W(43)=-0.8659993981540928; W(44)=0.8659993981540928; W(45)=-0.8893154459951141; W(46)=0.8893154459951141; W(47)=-0.9105221370785028; W(48)=0.9105221370785028; W(49)=-0.9295691721319396; W(50)=0.9295691721319396; W(51)=-0.9464113748584028; W(52)=0.9464113748584028; W(53)=-0.9610087996520538; W(54)=0.9610087996520538; W(55)=-0.9733268277899110; W(56)=0.9733268277899110; W(57)=-0.9833362538846260; W(58)=0.9833362538846260; W(59)=-0.9910133714767443; W(60)=0.9910133714767443; W(61)=-0.9963401167719553; W(62)=0.9963401167719553; W(63)=-0.9993050417357722; W(64)=0.9993050417357722;  P(1)=0.0486909570091397; P(2)=0.0486909570091397; P(3)=0.0485754674415034; P(4)=0.0485754674415034; P(5)=0.0483447622348030; P(6)=0.0483447622348030; P(7)=0.0479993885964583; P(8)=0.0479993885964583; P(9)=0.0475401657148303; P(10)=0.0475401657148303; P(11)=0.0469681828162100; P(12)=0.0469681828162100; P(13)=0.0462847965813144; P(14)=0.0462847965813144; P(15)=0.0454916279274181; P(16)=0.0454916279274181; P(17)=0.0445905581637566; P(18)=0.0445905581637566; P(19)=0.0435837245293235; P(20)=0.0435837245293235; P(21)=0.0424735151236536; P(22)=0.0424735151236536; P(23)=0.0412625632426235; P(24)=0.0412625632426235; P(25)=0.0399537411327203; P(26)=0.0399537411327203; P(27)=0.0385501531786156; P(28)=0.0385501531786156; P(29)=0.0370551285402400; P(30)=0.0370551285402400; P(31)=0.0354722132568824; P(32)=0.0354722132568824; P(33)=0.0338051618371416; P(34)=0.0338051618371416; P(35)=0.0320579283548516; P(36)=0.0320579283548516; P(37)=0.0302346570724025; P(38)=0.0302346570724025; P(39)=0.0283396726142595; P(40)=0.0283396726142595; P(41)=0.0263774697150547; P(42)=0.0263774697150547; P(43)=0.0243527025687109; P(44)=0.0243527025687109; P(45)=0.0222701738083833; P(46)=0.0222701738083833; P(47)=0.0201348231535302; P(48)=0.0201348231535302; P(49)=0.0179517157756973; P(50)=0.0179517157756973; P(51)=0.0157260304760247; P(52)=0.0157260304760247; P(53)=0.0134630478967186; P(54)=0.0134630478967186; P(55)=0.0111681394601311; P(56)=0.0111681394601311; P(57)=0.0088467598263639; P(58)=0.0088467598263639; P(59)=0.0065044579689784; P(60)=0.0065044579689784; P(61)=0.0041470332605625; P(62)=0.0041470332605625; P(63)=0.0017832807216964; P(64)=0.0017832807216964;
end

% Sum of integral function
fun = 0;
for k = 1:1:n
fun = fun + (upperLimit-lowerLimit)/2 * P(k)*subs(F,((upperLimit-lowerLimit)/2)*W(k) + ((lowerLimit+upperLimit)/2));
end


%% OUTPUT SECTION
% Export graphic to Command window
ezplot(F, floor(lowerLimit), ceil(upperLimit)); hold on; grid on;

% Print the output in Command window
sprintf('Numerical Integration\nf(x) = %s     Bounds = [ %.f ; %.f ]\nn = %.0f Points     Exate to polynome = %.0f \n\nArea = %.10f ',F,lowerLimit,upperLimit,n,(2*n-1), fun)

% clearvars x F lowerLimit upperLimit nGaussPoints n W P

end

